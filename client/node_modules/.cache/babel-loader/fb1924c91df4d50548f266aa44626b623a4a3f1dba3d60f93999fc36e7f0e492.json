{"ast":null,"code":"var _jsxFileName = \"/Users/asri/GQL-Project/client.js/src/DisplayData.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useQuery, gql, useLazyQuery } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QUERY_ALL_USERS = gql`\n    query GetAllUsers {\n        users {  \n            id    \n            name\n            username\n            age      \n            nationality\n    \n        }\n    }\n`;\nconst QUERY_ALL_MOVIES = gql`\n    query GetAllMovies {\n        movies {  \n            id    \n            name\n            yearOfPublication\n            isInTheaters\n    \n        }\n    }\n`;\nconst GET_MOVIE_BY_NAME = gql`\n    query Movie($name: String!) {\n        movie(name: $name){\n            name\n            yearOfPublication\n        }\n    }\n`;\nfunction DisplayData() {\n  _s();\n  const [movieSearched, setMovieSearched] = useState(\"\");\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(QUERY_ALL_USERS);\n  const {\n    data: movieData\n  } = useQuery(QUERY_ALL_MOVIES);\n  const [fetchMovie, {\n    data: movieSearchedData,\n    error: movieError\n  }] = useLazyQuery(GET_MOVIE_BY_NAME);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"DATA IS LOADING...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    console.log(error);\n  }\n  if (data) {\n    console.log(data);\n  }\n  if (movieSearchedData) {\n    console.log(movieSearchedData);\n  }\n  if (movieError) {\n    console.log(movieError);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [data && data.users.map(user => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Name: \", user.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Username: \", user.username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Age: \", user.age]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Nationality: \", user.nationality]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }, this);\n    }), movieData && movieData.movies.map(movie => {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Movie Name: \", movie.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 24\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Interstellar...\",\n        onChange: event => {\n          setMovieSearched(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          fetchMovie({\n            variables: {\n              name: movieSearched\n            }\n          });\n        },\n        children: \"Fetch Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [movieSearchedData, /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"MovieName: \", movieSearchedData.movie.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Year Of Publication: \", movieSearchedData.movie.yearOfPublication]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n_s(DisplayData, \"Wmt9gql8ZP0atuDKbnG3Y+1ykG8=\", false, function () {\n  return [useQuery, useQuery, useLazyQuery];\n});\n_c = DisplayData;\nexport default DisplayData;\nvar _c;\n$RefreshReg$(_c, \"DisplayData\");","map":{"version":3,"names":["React","useState","useQuery","gql","useLazyQuery","jsxDEV","_jsxDEV","QUERY_ALL_USERS","QUERY_ALL_MOVIES","GET_MOVIE_BY_NAME","DisplayData","_s","movieSearched","setMovieSearched","data","loading","error","movieData","fetchMovie","movieSearchedData","movieError","children","fileName","_jsxFileName","lineNumber","columnNumber","console","log","users","map","user","name","username","age","nationality","movies","movie","type","placeholder","onChange","event","target","value","onClick","variables","yearOfPublication","_c","$RefreshReg$"],"sources":["/Users/asri/GQL-Project/client.js/src/DisplayData.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery, gql, useLazyQuery } from \"@apollo/client\";\n\nconst QUERY_ALL_USERS = gql`\n    query GetAllUsers {\n        users {  \n            id    \n            name\n            username\n            age      \n            nationality\n    \n        }\n    }\n`;\n\nconst QUERY_ALL_MOVIES = gql`\n    query GetAllMovies {\n        movies {  \n            id    \n            name\n            yearOfPublication\n            isInTheaters\n    \n        }\n    }\n`;\n\nconst GET_MOVIE_BY_NAME = gql`\n    query Movie($name: String!) {\n        movie(name: $name){\n            name\n            yearOfPublication\n        }\n    }\n`;\n\nfunction DisplayData() {\n    const [movieSearched, setMovieSearched] = useState(\"\");\n\n    const { data, loading, error } = useQuery(QUERY_ALL_USERS);\n    const { data: movieData } = useQuery(QUERY_ALL_MOVIES);\n    const [fetchMovie, { data: movieSearchedData, error: movieError }] = useLazyQuery(GET_MOVIE_BY_NAME);\n\n    if (loading) {\n        return <h1>DATA IS LOADING...</h1>\n    }\n\n    if (error) {\n        console.log(error);\n    }\n\n    if (data) {\n        console.log(data);\n    }\n\n    if (movieSearchedData) {\n        console.log(movieSearchedData);\n    }\n\n    if (movieError) {\n        console.log(movieError);\n    }\n\n    return (\n        <div>\n            {data &&\n                data.users.map((user) => {\n                    return (\n                        <div>\n                            <h1>Name: {user.name}</h1>\n                            <h1>Username: {user.username}</h1>\n                            <h1>Age: {user.age}</h1>\n                            <h1>Nationality: {user.nationality}</h1>\n                        </div>\n                    );\n                })}\n\n            {movieData && movieData.movies.map((movie) => {\n                return <h1>Movie Name: {movie.name}</h1>\n            }\n            )}\n\n            <div>\n                <input type=\"text\" placeholder=\"Interstellar...\" onChange={(event) => { \n                    setMovieSearched(event.target.value);\n                }} />\n                <button onClick={() => {\n                    fetchMovie({\n                        variables: {\n\n                            name: movieSearched,\n\n                        },\n                    });\n                }}\n                >\n                    Fetch Data\n                </button>\n                <div>\n                    {movieSearchedData }\n                    <h1>MovieName: {movieSearchedData.movie.name}</h1>\n                    <h1>\n                        Year Of Publication: {movieSearchedData.movie.yearOfPublication}\n                    </h1>{\" \"}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default DisplayData;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}